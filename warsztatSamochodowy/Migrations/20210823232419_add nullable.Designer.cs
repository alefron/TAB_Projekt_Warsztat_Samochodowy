// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using warsztatSamochodowy.Models;

namespace warsztatSamochodowy.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210823232419_add nullable")]
    partial class addnullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("warsztatSamochodowy.Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.ActionType", b =>
                {
                    b.Property<string>("CodeAction")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeAction");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LocalNumber")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Postal")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Brand", b =>
                {
                    b.Property<string>("CodeBrand")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeBrand");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Personel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoleId");

                    b.ToTable("Personel");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Role", b =>
                {
                    b.Property<string>("CodeRole")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeRole");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Vehicle", b =>
                {
                    b.Property<string>("RegNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("BrandId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleTypeId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RegNumber");

                    b.HasIndex("BrandId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.VehicleType", b =>
                {
                    b.Property<string>("CodeType")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeType");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Action", b =>
                {
                    b.HasOne("warsztatSamochodowy.Models.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("warsztatSamochodowy.Models.Proposal", "Proposal")
                        .WithMany("Actions")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("warsztatSamochodowy.Models.Personel", "Worker")
                        .WithMany("Actions")
                        .HasForeignKey("WorkerId");

                    b.Navigation("ActionType");

                    b.Navigation("Proposal");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Client", b =>
                {
                    b.HasOne("warsztatSamochodowy.Models.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Personel", b =>
                {
                    b.HasOne("warsztatSamochodowy.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("warsztatSamochodowy.Models.Role", "Role")
                        .WithMany("personel")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Proposal", b =>
                {
                    b.HasOne("warsztatSamochodowy.Models.Personel", "Manager")
                        .WithMany("Proposals")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("warsztatSamochodowy.Models.Vehicle", "Vehicle")
                        .WithMany("Proposals")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Manager");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Vehicle", b =>
                {
                    b.HasOne("warsztatSamochodowy.Models.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId");

                    b.HasOne("warsztatSamochodowy.Models.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("warsztatSamochodowy.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("Brand");

                    b.Navigation("Client");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.ActionType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Address", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Brand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Personel", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Proposal", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Role", b =>
                {
                    b.Navigation("personel");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.Vehicle", b =>
                {
                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("warsztatSamochodowy.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
